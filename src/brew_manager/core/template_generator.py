"""Template generation for VM installation scripts."""

import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

from jinja2 import Environment, FileSystemLoader, Template
from rich.console import Console

from .config import Config, TemplateConfig


class TemplateGenerator:
    """Generates VM installation scripts from templates."""
    
    def __init__(self, config: Config):
        """Initialize the template generator."""
        self.config = config
        self.console = Console()
        
        # Set up Jinja2 environment
        template_dir = Path(__file__).parent.parent / "templates"
        self.jinja_env = Environment(
            loader=FileSystemLoader(str(template_dir)),
            trim_blocks=True,
            lstrip_blocks=True
        )
    
    def generate_script(
        self, 
        template_name: str, 
        output_path: Optional[Path] = None,
        custom_vars: Optional[Dict[str, Any]] = None
    ) -> Path:
        """Generate a VM installation script from a template."""
        
        template_config = self.config.get_template_config(template_name)
        if not template_config:
            raise ValueError(f"Template '{template_name}' not found in configuration")
        
        # Get packages for this template
        packages = self.config.get_all_packages(template_name)
        
        # Prepare template variables
        template_vars = {
            "template_name": template_config.name,
            "template_type": template_name,
            "version": self.config.version,
            "generation_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "formulae": packages["formulae"],
            "casks": packages["casks"],
        }
        
        # Add custom variables if provided
        if custom_vars:
            template_vars.update(custom_vars)
        
        # Load and render template
        template = self.jinja_env.get_template("vm_install_script.j2")
        rendered_script = template.render(**template_vars)
        
        # Determine output path
        if output_path is None:
            filename = f"{template_config.name}_v{template_config.version}.sh"
            output_path = self.config.output_dir / filename
        
        # Ensure output directory exists
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Write script to file
        with open(output_path, "w") as f:
            f.write(rendered_script)
        
        # Make script executable
        os.chmod(output_path, 0o755)
        
        self.console.print(f"‚úÖ Generated script: {output_path}", style="green")
        return output_path
    
    def generate_all_templates(self, output_dir: Optional[Path] = None) -> List[Path]:
        """Generate scripts for all configured templates."""
        if output_dir is None:
            output_dir = self.config.output_dir
        
        generated_scripts = []
        
        for template_name in self.config.templates.keys():
            try:
                script_path = self.generate_script(
                    template_name, 
                    output_dir / f"{template_name}_template.sh"
                )
                generated_scripts.append(script_path)
            except Exception as e:
                self.console.print(
                    f"‚ùå Failed to generate {template_name}: {e}", 
                    style="red"
                )
        
        return generated_scripts
    
    def create_drive_package(self, drive_path: Path) -> Path:
        """Create a complete package for a USB drive."""
        package_dir = drive_path / "brew-setup"
        package_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate all templates
        scripts = self.generate_all_templates(package_dir)
        
        # Create a launcher script
        launcher_content = self._create_launcher_script()
        launcher_path = package_dir / "setup.sh"
        
        with open(launcher_path, "w") as f:
            f.write(launcher_content)
        os.chmod(launcher_path, 0o755)
        
        # Copy configuration
        config_path = package_dir / "config.yaml"
        self.config.save_to_file(config_path)
        
        # Create README
        readme_content = self._create_drive_readme()
        readme_path = package_dir / "README.md"
        
        with open(readme_path, "w") as f:
            f.write(readme_content)
        
        self.console.print(f"üì¶ Created drive package: {package_dir}", style="cyan")
        return package_dir
    
    def _create_launcher_script(self) -> str:
        """Create a launcher script for the drive package."""
        return '''#!/bin/bash

# Brew Setup Launcher - Choose your installation template
# Generated by Brew Manager

set -e

echo "üç∫ Welcome to Brew Setup!"
echo "========================="
echo ""
echo "Available templates:"
echo ""

templates=(
    "minimal_template.sh:Minimal setup (essential tools only)"
    "development_template.sh:Development setup (coding tools)"
    "full_template.sh:Full setup (everything included)"
)

for i in "${!templates[@]}"; do
    IFS=':' read -r script desc <<< "${templates[$i]}"
    echo "$((i+1)). $desc"
done

echo ""
read -p "Choose a template (1-${#templates[@]}): " choice

if [[ "$choice" =~ ^[1-9]+$ ]] && [[ "$choice" -le "${#templates[@]}" ]]; then
    IFS=':' read -r script desc <<< "${templates[$((choice-1))]}"
    echo ""
    echo "üöÄ Running $desc..."
    echo ""
    
    if [[ -f "$script" ]]; then
        bash "$script"
    else
        echo "‚ùå Script not found: $script"
        exit 1
    fi
else
    echo "‚ùå Invalid choice"
    exit 1
fi
'''
    
    def _create_drive_readme(self) -> str:
        """Create README for the drive package."""
        return f'''# Brew Setup Package

Generated by Brew Manager v{self.config.version}
Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Quick Start

1. **Run the launcher:**
   ```bash
   ./setup.sh
   ```

2. **Or run a specific template directly:**
   ```bash
   ./minimal_template.sh     # Essential tools only
   ./development_template.sh # Development environment
   ./full_template.sh        # Complete setup
   ```

## Templates Available

### Minimal Template
- Essential CLI tools: git, curl, wget, tree, htop, jq
- Essential GUI apps: reminders-menubar

### Development Template  
- All minimal tools plus:
- Development tools: node, npm, yarn, docker, docker-compose, cmake
- Development apps: visual-studio-code, docker, postman

### Full Template
- All development tools plus:
- Productivity apps: alt-tab, rectangle, obsidian

## Customization

Edit `config.yaml` to customize package lists, then regenerate scripts using Brew Manager.

## System Requirements

- macOS or Linux
- Internet connection
- Bash shell

## Support

For issues or questions, refer to the main Brew Manager documentation.
'''

    def update_template_config(
        self, 
        template_name: str, 
        **kwargs
    ) -> None:
        """Update configuration for a specific template."""
        if template_name not in self.config.templates:
            self.config.templates[template_name] = TemplateConfig(name=template_name)
        
        # Update template configuration
        template_config = self.config.templates[template_name]
        for key, value in kwargs.items():
            if hasattr(template_config, key):
                setattr(template_config, key, value)
        
        # Save updated configuration
        self.config.save_to_file()
        
        self.console.print(f"‚úÖ Updated template '{template_name}'", style="green") 